Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> parse
Rule 1     parse -> expression
Rule 2     parse -> expression DELIMETER
Rule 3     parse -> expression COMMENT DELIMETER
Rule 4     parse -> expression COMMENT
Rule 5     parse -> COMMENT DELIMETER
Rule 6     parse -> COMMENT
Rule 7     parse -> DELIMETER
Rule 8     parse -> flag COMMENT DELIMETER
Rule 9     parse -> flag COMMENT
Rule 10    parse -> flag DELIMETER
Rule 11    parse -> empty
Rule 12    expression -> NO_REG_INSTRUCTION
Rule 13    expression -> ONE_REG_INSTRUCTION REGISTER
Rule 14    expression -> ONE_REG_INSTRUCTION FLAG
Rule 15    expression -> TWO_REG_INSTRUCTION REGISTER REG_DELIMETER REGISTER
Rule 16    expression -> TWO_REG_INSTRUCTION REGISTER REG_DELIMETER IMMEDIATE
Rule 17    flag -> FLAG_DEF
Rule 18    empty -> <empty>

Terminals, with rules where they appear

COMMENT              : 3 4 5 6 8 9
DELIMETER            : 2 3 5 7 8 10
FLAG                 : 14
FLAG_DEF             : 17
IMMEDIATE            : 16
NO_REG_INSTRUCTION   : 12
ONE_REG_INSTRUCTION  : 13 14
REGISTER             : 13 15 15 16
REG_DELIMETER        : 15 16
TWO_REG_INSTRUCTION  : 15 16
error                : 

Nonterminals, with rules where they appear

empty                : 11
expression           : 1 2 3 4
flag                 : 8 9 10
parse                : 0

Parsing method: LALR

state 0

    (0) S' -> . parse
    (1) parse -> . expression
    (2) parse -> . expression DELIMETER
    (3) parse -> . expression COMMENT DELIMETER
    (4) parse -> . expression COMMENT
    (5) parse -> . COMMENT DELIMETER
    (6) parse -> . COMMENT
    (7) parse -> . DELIMETER
    (8) parse -> . flag COMMENT DELIMETER
    (9) parse -> . flag COMMENT
    (10) parse -> . flag DELIMETER
    (11) parse -> . empty
    (12) expression -> . NO_REG_INSTRUCTION
    (13) expression -> . ONE_REG_INSTRUCTION REGISTER
    (14) expression -> . ONE_REG_INSTRUCTION FLAG
    (15) expression -> . TWO_REG_INSTRUCTION REGISTER REG_DELIMETER REGISTER
    (16) expression -> . TWO_REG_INSTRUCTION REGISTER REG_DELIMETER IMMEDIATE
    (17) flag -> . FLAG_DEF
    (18) empty -> .

    COMMENT         shift and go to state 4
    DELIMETER       shift and go to state 3
    NO_REG_INSTRUCTION shift and go to state 7
    ONE_REG_INSTRUCTION shift and go to state 8
    TWO_REG_INSTRUCTION shift and go to state 9
    FLAG_DEF        shift and go to state 10
    $end            reduce using rule 18 (empty -> .)

    parse                          shift and go to state 1
    expression                     shift and go to state 2
    flag                           shift and go to state 5
    empty                          shift and go to state 6

state 1

    (0) S' -> parse .



state 2

    (1) parse -> expression .
    (2) parse -> expression . DELIMETER
    (3) parse -> expression . COMMENT DELIMETER
    (4) parse -> expression . COMMENT

    $end            reduce using rule 1 (parse -> expression .)
    DELIMETER       shift and go to state 11
    COMMENT         shift and go to state 12


state 3

    (7) parse -> DELIMETER .

    $end            reduce using rule 7 (parse -> DELIMETER .)


state 4

    (5) parse -> COMMENT . DELIMETER
    (6) parse -> COMMENT .

    DELIMETER       shift and go to state 13
    $end            reduce using rule 6 (parse -> COMMENT .)


state 5

    (8) parse -> flag . COMMENT DELIMETER
    (9) parse -> flag . COMMENT
    (10) parse -> flag . DELIMETER

    COMMENT         shift and go to state 14
    DELIMETER       shift and go to state 15


state 6

    (11) parse -> empty .

    $end            reduce using rule 11 (parse -> empty .)


state 7

    (12) expression -> NO_REG_INSTRUCTION .

    DELIMETER       reduce using rule 12 (expression -> NO_REG_INSTRUCTION .)
    COMMENT         reduce using rule 12 (expression -> NO_REG_INSTRUCTION .)
    $end            reduce using rule 12 (expression -> NO_REG_INSTRUCTION .)


state 8

    (13) expression -> ONE_REG_INSTRUCTION . REGISTER
    (14) expression -> ONE_REG_INSTRUCTION . FLAG

    REGISTER        shift and go to state 16
    FLAG            shift and go to state 17


state 9

    (15) expression -> TWO_REG_INSTRUCTION . REGISTER REG_DELIMETER REGISTER
    (16) expression -> TWO_REG_INSTRUCTION . REGISTER REG_DELIMETER IMMEDIATE

    REGISTER        shift and go to state 18


state 10

    (17) flag -> FLAG_DEF .

    COMMENT         reduce using rule 17 (flag -> FLAG_DEF .)
    DELIMETER       reduce using rule 17 (flag -> FLAG_DEF .)


state 11

    (2) parse -> expression DELIMETER .

    $end            reduce using rule 2 (parse -> expression DELIMETER .)


state 12

    (3) parse -> expression COMMENT . DELIMETER
    (4) parse -> expression COMMENT .

    DELIMETER       shift and go to state 19
    $end            reduce using rule 4 (parse -> expression COMMENT .)


state 13

    (5) parse -> COMMENT DELIMETER .

    $end            reduce using rule 5 (parse -> COMMENT DELIMETER .)


state 14

    (8) parse -> flag COMMENT . DELIMETER
    (9) parse -> flag COMMENT .

    DELIMETER       shift and go to state 20
    $end            reduce using rule 9 (parse -> flag COMMENT .)


state 15

    (10) parse -> flag DELIMETER .

    $end            reduce using rule 10 (parse -> flag DELIMETER .)


state 16

    (13) expression -> ONE_REG_INSTRUCTION REGISTER .

    DELIMETER       reduce using rule 13 (expression -> ONE_REG_INSTRUCTION REGISTER .)
    COMMENT         reduce using rule 13 (expression -> ONE_REG_INSTRUCTION REGISTER .)
    $end            reduce using rule 13 (expression -> ONE_REG_INSTRUCTION REGISTER .)


state 17

    (14) expression -> ONE_REG_INSTRUCTION FLAG .

    DELIMETER       reduce using rule 14 (expression -> ONE_REG_INSTRUCTION FLAG .)
    COMMENT         reduce using rule 14 (expression -> ONE_REG_INSTRUCTION FLAG .)
    $end            reduce using rule 14 (expression -> ONE_REG_INSTRUCTION FLAG .)


state 18

    (15) expression -> TWO_REG_INSTRUCTION REGISTER . REG_DELIMETER REGISTER
    (16) expression -> TWO_REG_INSTRUCTION REGISTER . REG_DELIMETER IMMEDIATE

    REG_DELIMETER   shift and go to state 21


state 19

    (3) parse -> expression COMMENT DELIMETER .

    $end            reduce using rule 3 (parse -> expression COMMENT DELIMETER .)


state 20

    (8) parse -> flag COMMENT DELIMETER .

    $end            reduce using rule 8 (parse -> flag COMMENT DELIMETER .)


state 21

    (15) expression -> TWO_REG_INSTRUCTION REGISTER REG_DELIMETER . REGISTER
    (16) expression -> TWO_REG_INSTRUCTION REGISTER REG_DELIMETER . IMMEDIATE

    REGISTER        shift and go to state 22
    IMMEDIATE       shift and go to state 23


state 22

    (15) expression -> TWO_REG_INSTRUCTION REGISTER REG_DELIMETER REGISTER .

    DELIMETER       reduce using rule 15 (expression -> TWO_REG_INSTRUCTION REGISTER REG_DELIMETER REGISTER .)
    COMMENT         reduce using rule 15 (expression -> TWO_REG_INSTRUCTION REGISTER REG_DELIMETER REGISTER .)
    $end            reduce using rule 15 (expression -> TWO_REG_INSTRUCTION REGISTER REG_DELIMETER REGISTER .)


state 23

    (16) expression -> TWO_REG_INSTRUCTION REGISTER REG_DELIMETER IMMEDIATE .

    DELIMETER       reduce using rule 16 (expression -> TWO_REG_INSTRUCTION REGISTER REG_DELIMETER IMMEDIATE .)
    COMMENT         reduce using rule 16 (expression -> TWO_REG_INSTRUCTION REGISTER REG_DELIMETER IMMEDIATE .)
    $end            reduce using rule 16 (expression -> TWO_REG_INSTRUCTION REGISTER REG_DELIMETER IMMEDIATE .)

